{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "data-table",
  "type": "registry:component",
  "title": "Data Table",
  "description": "A reusable data table.",
  "dependencies": ["@tanstack/react-table", "lucide-react", "zod", "nuqs"],
  "registryDependencies": [
    "skeleton",
    "dropdown-menu",
    "button",
    "command",
    "popover",
    "badge",
    "separator",
    "select",
    "input",
    "table"
  ],
  "files": [
    {
      "path": "components/table/skeleton/data-table-pagination-skeleton.tsx",
      "content": "import { Skeleton } from \"@workspace/ui/components/skeleton\";\r\n\r\nexport function DataTablePaginationSkeleton() {\r\n  return (\r\n    <div className=\"flex flex-wrap items-center justify-between\">\r\n      <Skeleton className=\"h-7 w-32\" />\r\n      <div className=\"flex gap-3\">\r\n        <Skeleton className=\"h-7 w-44\" />\r\n        <Skeleton className=\"h-7 w-44\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/skeleton/data-table-pagination-skeleton.tsx"
    },
    {
      "path": "components/table/skeleton/data-table-toolbar-skeleton.tsx",
      "content": "import { Skeleton } from \"@workspace/ui/components/skeleton\";\r\n\r\nexport function DataTableToolbarSkeleton() {\r\n  return (\r\n    <div className=\"flex justify-between\">\r\n      <div className=\"flex gap-2.5 flex-wrap overflow-auto\">\r\n        <Skeleton className=\"w-48 h-7\" />\r\n        <Skeleton className=\"w-40 h-7\" />\r\n        <Skeleton className=\"w-40 h-7\" />\r\n      </div>\r\n      <Skeleton className=\"w-28 h-7\" />\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/skeleton/data-table-toolbar-skeleton.tsx"
    },
    {
      "path": "components/table/config.ts",
      "content": "export type DataTableConfig = typeof dataTableConfig;\r\n\r\nexport const dataTableConfig = {\r\n  filterVariants: [\r\n    \"text\",\r\n    \"number\",\r\n    \"range\",\r\n    \"date\",\r\n    \"dateRange\",\r\n    \"boolean\",\r\n    \"select\",\r\n    \"multiSelect\",\r\n  ] as const,\r\n};\r\n",
      "type": "registry:component",
      "target": "components/table/config.ts"
    },
    {
      "path": "components/table/data-table-column-header.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column } from \"@tanstack/react-table\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuCheckboxItem,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from \"@workspace/ui/components/dropdown-menu\";\r\nimport { cn } from \"@workspace/ui/lib/utils\";\r\nimport {\r\n  ChevronDown,\r\n  ChevronUp,\r\n  ChevronsUpDown,\r\n  EyeOff,\r\n  X,\r\n} from \"lucide-react\";\r\n\r\ninterface DataTableColumnHeaderProps<TData, TValue>\r\n  extends React.ComponentProps<typeof DropdownMenuTrigger> {\r\n  column: Column<TData, TValue>;\r\n  title: string;\r\n}\r\n\r\nexport function DataTableColumnHeader<TData, TValue>({\r\n  column,\r\n  title,\r\n  className,\r\n  ...props\r\n}: DataTableColumnHeaderProps<TData, TValue>) {\r\n  if (!column.getCanSort() && !column.getCanHide()) {\r\n    return <div className={cn(className)}>{title}</div>;\r\n  }\r\n\r\n  return (\r\n    <DropdownMenu>\r\n      <DropdownMenuTrigger\r\n        className={cn(\r\n          \"-ml-1.5 flex h-8 items-center gap-1.5 rounded-md px-2 py-1.5 hover:bg-accent focus:outline-none focus:ring-1 focus:ring-ring data-[state=open]:bg-accent [&_svg]:size-4 [&_svg]:shrink-0 [&_svg]:text-muted-foreground\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        {title}\r\n        {column.getCanSort() &&\r\n          (column.getIsSorted() === \"desc\" ? (\r\n            <ChevronDown />\r\n          ) : column.getIsSorted() === \"asc\" ? (\r\n            <ChevronUp />\r\n          ) : (\r\n            <ChevronsUpDown />\r\n          ))}\r\n      </DropdownMenuTrigger>\r\n      <DropdownMenuContent align=\"start\" className=\"w-28\">\r\n        {column.getCanSort() && (\r\n          <>\r\n            <DropdownMenuCheckboxItem\r\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n              checked={column.getIsSorted() === \"asc\"}\r\n              onClick={() => column.toggleSorting(false)}\r\n            >\r\n              <ChevronUp />\r\n              Asc\r\n            </DropdownMenuCheckboxItem>\r\n            <DropdownMenuCheckboxItem\r\n              className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n              checked={column.getIsSorted() === \"desc\"}\r\n              onClick={() => column.toggleSorting(true)}\r\n            >\r\n              <ChevronDown />\r\n              Desc\r\n            </DropdownMenuCheckboxItem>\r\n            {column.getIsSorted() && (\r\n              <DropdownMenuItem\r\n                className=\"pl-2 [&_svg]:text-muted-foreground\"\r\n                onClick={() => column.clearSorting()}\r\n              >\r\n                <X />\r\n                Reset\r\n              </DropdownMenuItem>\r\n            )}\r\n          </>\r\n        )}\r\n        {column.getCanHide() && (\r\n          <DropdownMenuCheckboxItem\r\n            className=\"relative pr-8 pl-2 [&>span:first-child]:right-2 [&>span:first-child]:left-auto [&_svg]:text-muted-foreground\"\r\n            checked={!column.getIsVisible()}\r\n            onClick={() => column.toggleVisibility(false)}\r\n          >\r\n            <EyeOff />\r\n            Hide\r\n          </DropdownMenuCheckboxItem>\r\n        )}\r\n      </DropdownMenuContent>\r\n    </DropdownMenu>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table-column-header.tsx"
    },
    {
      "path": "components/table/data-table-faceted-filter.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Option } from \"@/components/table/types\";\r\nimport type { Column } from \"@tanstack/react-table\";\r\nimport { Button } from \"@workspace/ui/components/button\";\r\nimport {\r\n  CommandInput,\r\n  CommandList,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandSeparator,\r\n  Command,\r\n} from \"@workspace/ui/components/command\";\r\nimport {\r\n  Popover,\r\n  PopoverTrigger,\r\n  PopoverContent,\r\n} from \"@workspace/ui/components/popover\";\r\nimport { cn } from \"@workspace/ui/lib/utils\";\r\nimport { Check, PlusCircle, XCircle } from \"lucide-react\";\r\nimport { Badge } from \"@workspace/ui/components/badge\";\r\n\r\nimport * as React from \"react\";\r\nimport { Separator } from \"@workspace/ui/components/separator\";\r\n\r\ninterface DataTableFacetedFilterProps<TData, TValue> {\r\n  column?: Column<TData, TValue>;\r\n  title?: string;\r\n  options: Option[];\r\n  multiple?: boolean;\r\n}\r\n\r\nexport function DataTableFacetedFilter<TData, TValue>({\r\n  column,\r\n  title,\r\n  options,\r\n  multiple,\r\n}: DataTableFacetedFilterProps<TData, TValue>) {\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const columnFilterValue = column?.getFilterValue();\r\n  const selectedValues = new Set(\r\n    Array.isArray(columnFilterValue) ? columnFilterValue : []\r\n  );\r\n\r\n  const onItemSelect = React.useCallback(\r\n    (option: Option, isSelected: boolean) => {\r\n      if (!column) return;\r\n\r\n      if (multiple) {\r\n        const newSelectedValues = new Set(selectedValues);\r\n        if (isSelected) {\r\n          newSelectedValues.delete(option.value);\r\n        } else {\r\n          newSelectedValues.add(option.value);\r\n        }\r\n        const filterValues = Array.from(newSelectedValues);\r\n        column.setFilterValue(filterValues.length ? filterValues : undefined);\r\n      } else {\r\n        column.setFilterValue(isSelected ? undefined : [option.value]);\r\n        setOpen(false);\r\n      }\r\n    },\r\n    [column, multiple, selectedValues]\r\n  );\r\n\r\n  const onReset = React.useCallback(\r\n    (event?: React.MouseEvent) => {\r\n      event?.stopPropagation();\r\n      column?.setFilterValue(undefined);\r\n    },\r\n    [column]\r\n  );\r\n\r\n  return (\r\n    <Popover open={open} onOpenChange={setOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"outline\" size=\"sm\" className=\"border-dashed\">\r\n          {selectedValues?.size > 0 ? (\r\n            <div\r\n              role=\"button\"\r\n              aria-label={`Clear ${title} filter`}\r\n              tabIndex={0}\r\n              onClick={onReset}\r\n              className=\"rounded-sm opacity-70 transition-opacity hover:opacity-100 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring\"\r\n            >\r\n              <XCircle />\r\n            </div>\r\n          ) : (\r\n            <PlusCircle />\r\n          )}\r\n          {title}\r\n          {selectedValues?.size > 0 && (\r\n            <>\r\n              <Separator\r\n                orientation=\"vertical\"\r\n                className=\"mx-0.5 data-[orientation=vertical]:h-4\"\r\n              />\r\n              <Badge\r\n                variant=\"secondary\"\r\n                className=\"rounded-sm px-1 font-normal lg:hidden\"\r\n              >\r\n                {selectedValues.size}\r\n              </Badge>\r\n              <div className=\"hidden items-center gap-1 lg:flex\">\r\n                {selectedValues.size > 2 ? (\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className=\"rounded-sm px-1 font-normal\"\r\n                  >\r\n                    {selectedValues.size} selected\r\n                  </Badge>\r\n                ) : (\r\n                  options\r\n                    .filter((option) => selectedValues.has(option.value))\r\n                    .map((option) => (\r\n                      <Badge\r\n                        variant=\"secondary\"\r\n                        key={option.value}\r\n                        className=\"rounded-sm px-1 font-normal\"\r\n                      >\r\n                        {option.label}\r\n                      </Badge>\r\n                    ))\r\n                )}\r\n              </div>\r\n            </>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent className=\"w-[12.5rem] p-0\" align=\"start\">\r\n        <Command>\r\n          <CommandInput placeholder={title} />\r\n          <CommandList className=\"max-h-full\">\r\n            <CommandEmpty>No results found.</CommandEmpty>\r\n            <CommandGroup className=\"max-h-[18.75rem] overflow-y-auto overflow-x-hidden\">\r\n              {options.map((option) => {\r\n                const isSelected = selectedValues.has(option.value);\r\n\r\n                return (\r\n                  <CommandItem\r\n                    key={option.value}\r\n                    onSelect={() => onItemSelect(option, isSelected)}\r\n                  >\r\n                    <div\r\n                      className={cn(\r\n                        \"flex size-4 items-center justify-center rounded-sm border border-primary\",\r\n                        isSelected\r\n                          ? \"bg-primary\"\r\n                          : \"opacity-50 [&_svg]:invisible\"\r\n                      )}\r\n                    >\r\n                      <Check />\r\n                    </div>\r\n                    {option.icon && <option.icon />}\r\n                    <span className=\"truncate\">{option.label}</span>\r\n                    {option.count && (\r\n                      <span className=\"ml-auto font-mono text-xs\">\r\n                        {option.count}\r\n                      </span>\r\n                    )}\r\n                  </CommandItem>\r\n                );\r\n              })}\r\n            </CommandGroup>\r\n            {selectedValues.size > 0 && (\r\n              <>\r\n                <CommandSeparator />\r\n                <CommandGroup>\r\n                  <CommandItem\r\n                    onSelect={() => onReset()}\r\n                    className=\"justify-center text-center\"\r\n                  >\r\n                    Clear filters\r\n                  </CommandItem>\r\n                </CommandGroup>\r\n              </>\r\n            )}\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table-faceted-filter.tsx"
    },
    {
      "path": "components/table/data-table-pagination.tsx",
      "content": "import type { Table } from \"@tanstack/react-table\";\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n} from \"lucide-react\";\r\n\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@workspace/ui/components/select\";\r\nimport { Button } from \"@workspace/ui/components/button\";\r\nimport { cn } from \"@workspace/ui/lib/utils\";\r\n\r\ninterface DataTablePaginationProps<TData> extends React.ComponentProps<\"div\"> {\r\n  table: Table<TData>;\r\n  pageSizeOptions?: number[];\r\n}\r\n\r\nexport function DataTablePagination<TData>({\r\n  table,\r\n  pageSizeOptions = [10, 20, 30, 40, 50],\r\n  className,\r\n  ...props\r\n}: DataTablePaginationProps<TData>) {\r\n  return (\r\n    <div\r\n      className={cn(\r\n        \"flex w-full flex-col-reverse items-center justify-between gap-4 overflow-auto p-1 sm:flex-row sm:gap-8\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <div className=\"flex-1 whitespace-nowrap text-muted-foreground text-sm\">\r\n        {table.getFilteredSelectedRowModel().rows.length} of{\" \"}\r\n        {table.getFilteredRowModel().rows.length} row(s) selected.\r\n      </div>\r\n      <div className=\"flex flex-col-reverse items-center gap-4 sm:flex-row sm:gap-6 lg:gap-8\">\r\n        <div className=\"flex items-center space-x-2\">\r\n          <p className=\"whitespace-nowrap font-medium text-sm\">Rows per page</p>\r\n          <Select\r\n            value={`${table.getState().pagination.pageSize}`}\r\n            onValueChange={(value) => {\r\n              table.setPageSize(Number(value));\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"h-8 w-[4.5rem] [&[data-size]]:h-8\">\r\n              <SelectValue placeholder={table.getState().pagination.pageSize} />\r\n            </SelectTrigger>\r\n            <SelectContent side=\"top\">\r\n              {pageSizeOptions.map((pageSize) => (\r\n                <SelectItem key={pageSize} value={`${pageSize}`}>\r\n                  {pageSize}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div className=\"flex items-center justify-center font-medium text-sm\">\r\n          Page {table.getState().pagination.pageIndex + 1} of{\" \"}\r\n          {table.getPageCount()}\r\n        </div>\r\n        <div className=\"flex items-center space-x-2\">\r\n          <Button\r\n            aria-label=\"Go to first page\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"hidden size-8 lg:flex\"\r\n            onClick={() => table.setPageIndex(0)}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <ChevronsLeft />\r\n          </Button>\r\n          <Button\r\n            aria-label=\"Go to previous page\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"size-8\"\r\n            onClick={() => table.previousPage()}\r\n            disabled={!table.getCanPreviousPage()}\r\n          >\r\n            <ChevronLeft />\r\n          </Button>\r\n          <Button\r\n            aria-label=\"Go to next page\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"size-8\"\r\n            onClick={() => table.nextPage()}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <ChevronRight />\r\n          </Button>\r\n          <Button\r\n            aria-label=\"Go to last page\"\r\n            variant=\"outline\"\r\n            size=\"icon\"\r\n            className=\"hidden size-8 lg:flex\"\r\n            onClick={() => table.setPageIndex(table.getPageCount() - 1)}\r\n            disabled={!table.getCanNextPage()}\r\n          >\r\n            <ChevronsRight />\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table-pagination.tsx"
    },
    {
      "path": "components/table/data-table-toolbar.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Column, Table } from \"@tanstack/react-table\";\r\nimport { Button } from \"@workspace/ui/components/button\";\r\nimport { cn } from \"@workspace/ui/lib/utils\";\r\nimport { X } from \"lucide-react\";\r\nimport * as React from \"react\";\r\nimport { DataTableViewOptions } from \"./data-table-view-options\";\r\nimport { Input } from \"@workspace/ui/components/input\";\r\nimport { DataTableFacetedFilter } from \"./data-table-faceted-filter\";\r\nimport { DataTableToolbarSkeleton } from \"./skeleton/data-table-toolbar-skeleton\";\r\n\r\ninterface DataTableToolbarProps<TData> extends React.ComponentProps<\"div\"> {\r\n  table: Table<TData>;\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport function DataTableToolbar<TData>({\r\n  table,\r\n  children,\r\n  className,\r\n  isLoading,\r\n  ...props\r\n}: DataTableToolbarProps<TData>) {\r\n  if (isLoading) {\r\n    return <DataTableToolbarSkeleton />;\r\n  }\r\n\r\n  const isFiltered = table.getState().columnFilters.length > 0;\r\n\r\n  const columns = React.useMemo(\r\n    () => table.getAllColumns().filter((column) => column.getCanFilter()),\r\n    [table]\r\n  );\r\n\r\n  const onReset = React.useCallback(() => {\r\n    table.resetColumnFilters();\r\n  }, [table]);\r\n\r\n  return (\r\n    <div\r\n      role=\"toolbar\"\r\n      aria-orientation=\"horizontal\"\r\n      className={cn(\"flex w-full items-start justify-between gap-2\", className)}\r\n      {...props}\r\n    >\r\n      <div className=\"flex flex-1 flex-wrap items-center gap-2\">\r\n        {columns.map((column) => (\r\n          <DataTableToolbarFilter key={column.id} column={column} />\r\n        ))}\r\n        {isFiltered && (\r\n          <Button\r\n            aria-label=\"Reset filters\"\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            className=\"border-dashed\"\r\n            onClick={onReset}\r\n          >\r\n            <X />\r\n            Reset\r\n          </Button>\r\n        )}\r\n      </div>\r\n      <div className=\"flex items-center gap-2\">\r\n        {children}\r\n        <DataTableViewOptions table={table} />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\ninterface DataTableToolbarFilterProps<TData> {\r\n  column: Column<TData>;\r\n}\r\n\r\nfunction DataTableToolbarFilter<TData>({\r\n  column,\r\n}: DataTableToolbarFilterProps<TData>) {\r\n  {\r\n    const columnMeta = column.columnDef.meta;\r\n\r\n    const onFilterRender = React.useCallback(() => {\r\n      if (!columnMeta?.variant) return null;\r\n\r\n      switch (columnMeta.variant) {\r\n        case \"text\":\r\n          return (\r\n            <Input\r\n              placeholder={columnMeta.placeholder ?? columnMeta.label}\r\n              value={(column.getFilterValue() as string) ?? \"\"}\r\n              onChange={(event) => column.setFilterValue(event.target.value)}\r\n              className=\"h-8 w-40 lg:w-56 focus-visible:ring-0\"\r\n            />\r\n          );\r\n\r\n        case \"number\":\r\n          return (\r\n            <div className=\"relative\">\r\n              <Input\r\n                type=\"number\"\r\n                inputMode=\"numeric\"\r\n                placeholder={columnMeta.placeholder ?? columnMeta.label}\r\n                value={(column.getFilterValue() as string) ?? \"\"}\r\n                onChange={(event) => column.setFilterValue(event.target.value)}\r\n                className={cn(\"h-8 w-[120px]\", columnMeta.unit && \"pr-8\")}\r\n              />\r\n              {columnMeta.unit && (\r\n                <span className=\"absolute top-0 right-0 bottom-0 flex items-center rounded-r-md bg-accent px-2 text-muted-foreground text-sm\">\r\n                  {columnMeta.unit}\r\n                </span>\r\n              )}\r\n            </div>\r\n          );\r\n        case \"select\":\r\n        case \"multiSelect\":\r\n          return (\r\n            <DataTableFacetedFilter\r\n              column={column}\r\n              title={columnMeta.label ?? column.id}\r\n              options={columnMeta.options ?? []}\r\n              multiple={columnMeta.variant === \"multiSelect\"}\r\n            />\r\n          );\r\n        default:\r\n          return null;\r\n      }\r\n    }, [column, columnMeta]);\r\n\r\n    return onFilterRender();\r\n  }\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table-toolbar.tsx"
    },
    {
      "path": "components/table/data-table-view-options.tsx",
      "content": "\"use client\";\r\n\r\nimport type { Table } from \"@tanstack/react-table\";\r\nimport { Check, ChevronsUpDown, Settings2 } from \"lucide-react\";\r\n\r\nimport * as React from \"react\";\r\nimport {\r\n  Popover,\r\n  PopoverContent,\r\n  PopoverTrigger,\r\n} from \"@workspace/ui/components/popover\";\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandInput,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"@workspace/ui/components/command\";\r\nimport { Button } from \"@workspace/ui/components/button\";\r\nimport { cn } from \"@workspace/ui/lib/utils\";\r\n\r\ninterface DataTableViewOptionsProps<TData> {\r\n  table: Table<TData>;\r\n}\r\n\r\nexport function DataTableViewOptions<TData>({\r\n  table,\r\n}: DataTableViewOptionsProps<TData>) {\r\n  const columns = React.useMemo(\r\n    () =>\r\n      table\r\n        .getAllColumns()\r\n        .filter(\r\n          (column) =>\r\n            typeof column.accessorFn !== \"undefined\" && column.getCanHide()\r\n        ),\r\n    [table]\r\n  );\r\n\r\n  return (\r\n    <Popover>\r\n      <PopoverTrigger asChild>\r\n        <Button\r\n          aria-label=\"Toggle columns\"\r\n          role=\"combobox\"\r\n          variant=\"outline\"\r\n          size=\"sm\"\r\n          className=\"ml-auto hidden h-8 lg:flex\"\r\n        >\r\n          <Settings2 />\r\n          View\r\n          <ChevronsUpDown className=\"ml-auto opacity-50\" />\r\n        </Button>\r\n      </PopoverTrigger>\r\n      <PopoverContent align=\"end\" className=\"w-44 p-0\">\r\n        <Command>\r\n          <CommandInput placeholder=\"Search columns...\" />\r\n          <CommandList>\r\n            <CommandEmpty>No columns found.</CommandEmpty>\r\n            <CommandGroup>\r\n              {columns.map((column) => (\r\n                <CommandItem\r\n                  key={column.id}\r\n                  onSelect={() =>\r\n                    column.toggleVisibility(!column.getIsVisible())\r\n                  }\r\n                >\r\n                  <span className=\"truncate\">\r\n                    {column.columnDef.meta?.label ?? column.id}\r\n                  </span>\r\n                  <Check\r\n                    className={cn(\r\n                      \"ml-auto size-4 shrink-0\",\r\n                      column.getIsVisible() ? \"opacity-100\" : \"opacity-0\"\r\n                    )}\r\n                  />\r\n                </CommandItem>\r\n              ))}\r\n            </CommandGroup>\r\n          </CommandList>\r\n        </Command>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table-view-options.tsx"
    },
    {
      "path": "components/table/data-table-wrapper.tsx",
      "content": "import { cn } from \"@workspace/ui/lib/utils\";\r\n\r\ninterface Props {\r\n  children?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\nexport function DataTableWrapper({ children, className }: Props) {\r\n  return (\r\n    <div\r\n      className={cn(\"flex w-full flex-col gap-2.5 overflow-auto\", className)}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table-wrapper.tsx"
    },
    {
      "path": "components/table/data-table.tsx",
      "content": "import { type Table as TanstackTable, flexRender } from \"@tanstack/react-table\";\r\nimport type * as React from \"react\";\r\n\r\nimport { cn } from \"@workspace/ui/lib/utils\";\r\nimport {\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  TableHeader,\r\n  TableRow,\r\n} from \"@workspace/ui/components/table\";\r\nimport { Skeleton } from \"@workspace/ui/components/skeleton\";\r\nimport { DataTablePagination } from \"./data-table-pagination\";\r\nimport { DataTablePaginationSkeleton } from \"./skeleton/data-table-pagination-skeleton\";\r\n\r\ninterface DataTableProps<TData> extends React.ComponentProps<\"div\"> {\r\n  table: TanstackTable<TData>;\r\n  actionBar?: React.ReactNode;\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport function DataTable<TData>({\r\n  table,\r\n  actionBar,\r\n  children,\r\n  className,\r\n  isLoading,\r\n  ...props\r\n}: DataTableProps<TData>) {\r\n  const columnCount = table.getAllColumns().length;\r\n\r\n  return (\r\n    <div\r\n      className={cn(\"flex w-full flex-col gap-2.5 overflow-auto\", className)}\r\n      {...props}\r\n    >\r\n      {children}\r\n      <div className=\"overflow-hidden rounded-md border\">\r\n        <Table>\r\n          <TableHeader>\r\n            {table.getHeaderGroups().map((headerGroup) => (\r\n              <TableRow key={headerGroup.id}>\r\n                {headerGroup.headers.map((header) => (\r\n                  <TableHead\r\n                    key={header.id}\r\n                    colSpan={header.colSpan}\r\n                    style={\r\n                      {\r\n                        //   ...getCommonPinningStyles({ column: header.column }),\r\n                      }\r\n                    }\r\n                  >\r\n                    {header.isPlaceholder\r\n                      ? null\r\n                      : flexRender(\r\n                          header.column.columnDef.header,\r\n                          header.getContext()\r\n                        )}\r\n                  </TableHead>\r\n                ))}\r\n              </TableRow>\r\n            ))}\r\n          </TableHeader>\r\n          <TableBody>\r\n            {isLoading ? (\r\n              Array.from({ length: 10 }).map((_, rowIndex) => (\r\n                <TableRow key={`skeleton-row-${rowIndex}`}>\r\n                  {Array.from({ length: columnCount }).map((_, cellIndex) => (\r\n                    <TableCell key={`skeleton-cell-${rowIndex}-${cellIndex}`}>\r\n                      <Skeleton className=\"h-5 w-full rounded-sm\" />\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : table.getRowModel().rows?.length ? (\r\n              table.getRowModel().rows.map((row) => (\r\n                <TableRow\r\n                  key={row.id}\r\n                  data-state={row.getIsSelected() && \"selected\"}\r\n                >\r\n                  {row.getVisibleCells().map((cell) => (\r\n                    <TableCell\r\n                      key={cell.id}\r\n                      style={\r\n                        {\r\n                          // ...getCommonPinningStyles({ column: cell.column }),\r\n                        }\r\n                      }\r\n                    >\r\n                      {flexRender(\r\n                        cell.column.columnDef.cell,\r\n                        cell.getContext()\r\n                      )}\r\n                    </TableCell>\r\n                  ))}\r\n                </TableRow>\r\n              ))\r\n            ) : (\r\n              <TableRow>\r\n                <TableCell colSpan={columnCount} className=\"h-24 text-center\">\r\n                  No results.\r\n                </TableCell>\r\n              </TableRow>\r\n            )}\r\n          </TableBody>\r\n        </Table>\r\n      </div>\r\n      <div className=\"flex flex-col gap-2.5\">\r\n        {!isLoading ? (\r\n          <DataTablePagination table={table} />\r\n        ) : (\r\n          <DataTablePaginationSkeleton />\r\n        )}\r\n        {actionBar &&\r\n          table.getFilteredSelectedRowModel().rows.length > 0 &&\r\n          actionBar}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/data-table.tsx"
    },
    {
      "path": "components/table/parsers.ts",
      "content": "import { createParser } from \"nuqs/server\";\r\nimport { z } from \"zod\";\r\n\r\nimport { dataTableConfig } from \"@/components/table/config\";\r\nimport { ExtendedColumnSort } from \"@/components/table/types\";\r\n\r\nconst sortingItemSchema = z.object({\r\n  id: z.string(),\r\n  desc: z.boolean(),\r\n});\r\n\r\nexport const getSortingStateParser = <TData>(\r\n  columnIds?: string[] | Set<string>\r\n) => {\r\n  const validKeys = columnIds\r\n    ? columnIds instanceof Set\r\n      ? columnIds\r\n      : new Set(columnIds)\r\n    : null;\r\n\r\n  return createParser({\r\n    parse: (value) => {\r\n      try {\r\n        const parsed = JSON.parse(value);\r\n        const result = z.array(sortingItemSchema).safeParse(parsed);\r\n\r\n        if (!result.success) return null;\r\n\r\n        if (validKeys && result.data.some((item) => !validKeys.has(item.id))) {\r\n          return null;\r\n        }\r\n\r\n        return result.data as ExtendedColumnSort<TData>[];\r\n      } catch {\r\n        return null;\r\n      }\r\n    },\r\n    serialize: (value) => JSON.stringify(value),\r\n  });\r\n};\r\n\r\nconst filterItemSchema = z.object({\r\n  id: z.string(),\r\n  value: z.union([z.string(), z.array(z.string())]),\r\n  variant: z.enum(dataTableConfig.filterVariants),\r\n  filterId: z.string(),\r\n});\r\n\r\nexport type FilterItemSchema = z.infer<typeof filterItemSchema>;\r\n",
      "type": "registry:component",
      "target": "components/table/parsers.ts"
    },
    {
      "path": "components/table/types.ts",
      "content": "import type { DataTableConfig } from \"@/components/table/config\";\r\nimport type { FilterItemSchema } from \"@/components/table/parsers\";\r\nimport type { ColumnSort, Row, RowData } from \"@tanstack/react-table\";\r\n\r\ndeclare module \"@tanstack/react-table\" {\r\n  interface ColumnMeta<TData extends RowData, TValue> {\r\n    label?: string;\r\n    placeholder?: string;\r\n    variant?: FilterVariant;\r\n    options?: Option[];\r\n    range?: [number, number];\r\n    unit?: string;\r\n    icon?: React.FC<React.SVGProps<SVGSVGElement>>;\r\n  }\r\n}\r\n\r\nexport interface Option {\r\n  label: string;\r\n  value: string;\r\n  count?: number;\r\n  icon?: React.FC<React.SVGProps<SVGSVGElement>>;\r\n}\r\n\r\nexport type FilterVariant = DataTableConfig[\"filterVariants\"][number];\r\n\r\nexport interface ExtendedColumnSort<TData> extends Omit<ColumnSort, \"id\"> {\r\n  id: Extract<keyof TData, string>;\r\n}\r\n\r\nexport interface ExtendedColumnFilter<TData> extends FilterItemSchema {\r\n  id: Extract<keyof TData, string>;\r\n}\r\n\r\nexport interface DataTableRowAction<TData> {\r\n  row: Row<TData>;\r\n  variant: \"update\" | \"delete\";\r\n}\r\n",
      "type": "registry:component",
      "target": "components/table/types.ts"
    }
  ]
}
